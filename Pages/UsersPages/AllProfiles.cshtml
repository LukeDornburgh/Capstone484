@page
@using Lab1.Pages.DB_Class;
@using System.Data.SqlClient;
@model Lab1.Pages.UsersPages.AllProfilesModel
@{
    ViewData["Title"] = "People";
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi" crossorigin="anonymous">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-OERcA2EqjJCMA+/3y+gxIOqMEjwtxJY7qPCqsdltbNJuaOe923+mo//f6V8Qbsw3" crossorigin="anonymous"></script>


<style>

    .apply {
        background: #9582aa;
        color: #f8f9fa;
        margin-bottom: 10px;
        display: flex;
        border-radius: 8px;
        padding-left: 10px;
        padding-right: 10px;
        padding-top: 5px;
        padding-bottom: 5px;
        border: 5px;
    }

    .btn-primary {
        background-color: #31184C;
        border: #31184C;
    }

        .btn-primary:hover {
            background-color: #9582AA;
        }

    .btn-secondary {
        background-color: #9582AA
    }

    .people {
        display: grid;
        margin: 0 auto;
        max-width: 1500px;
        grid-template-columns: repeat(12, 1fr);
        padding: 20px;
        padding-inline-start: 2%;
        background-color: #eae6ee;
    }

    aside {
        grid-column: 1/5;
        background-color: white;
        padding: 20px;
        border-radius: 10px;
    }

    .cards {
        grid-column: 5/13;
        background-color: #EAE6EE;
        padding: 20px;
        border-radius: 10px;
    }

    h6 {
        background-color: #9582aa;
        height: fit-content;
        width: fit-content;
        border: none;
        color: #fff;
        padding: 2px 8px;
        white-space: nowrap;
        position: relative;
        text-align: start;
        text-decoration: none;
        display: inline-flex;
        margin: 4px 2px;
        border-radius: 16px;
        box-sizing: border-box;
        font-size: 12px;
        font-family: Helvetica, sans-serif;
        overflow-wrap: break-word;
    }

    .d-flex {
        display: flex;
        justify-content: space-around;
        align-items: center;
    }

    .icon {
        float: right;
    }

    .card {
        border: none;
        gap: 10px;
    }

    h5 {
        font-family: Helvetica, Sans-Serif;
        font-weight: bold;
        color: #31184C;
    }

    h2 {
        font-family: Helvetica, Sans-Serif;
        font-weight: bold;
        color: #31184C;
    }

    h3 {
        font-family: Helvetica, Sans-Serif;
        font-weight: bold;
        color: #31184C;
    }

    p {
        font-family: Helvetica, Sans-Serif;
        color: grey;
    }


    label {
        font-family: Helvetica, Sans-Serif;
        font-weight: bold;
        color: #31184C;
    }

    #tagArea {
        padding: 15px;
    }

    #myInput2 {
        margin-bottom: 0px;
        border-radius: 7px;
    }

    #tagArea span {
        background-color: #9582AA;
        color: white;
        font-weight: bold;
    }


    @@media only screen and (min-width: 620px) {


        aside {
            grid-column: 1/4;
        }

        .cards {
            grid-column: 4/13;
        }
    }

    @@media only screen and (min-width: 900px) {


        aside {
            grid-column: 1/4;
        }

        .cards {
            grid-column: 4/13;
        }
    }

    #myTable {
        padding: 10px;
        grid-column: 1/4;
    }

    .filterButton {
        background-color: #31184C;
        border: #31184C;
        color: white;
    }

    .space {
        padding: 20px;
    }

    #peopleTab {
        color: #d8ec91;
    }

    .form-check-input:checked {
        background-color: #31184C;
    }

    .view {
        display: inline-block;
    }

    p {
        margin: 0px;
    }
</style>

<script>

    // list of values the user has clicked
    const newlyClickedValues = new Map();


    function existingSkills() {
        console.log("running on load");


        //I need to loop through each row in the table and get the Skill ID and the Skill name to add to the map
        //check those boxes, and ensure the pills display

        var existingList = document.getElementById('tagArea').getElementsByTagName('span');
        console.log(existingList);

        for (i = 0; i < existingList.length; i++) {
            const skillNameExisting = existingList[i].innerText;
            const skillIDExisting = existingList[i].id;

            console.log(skillIDExisting);

            const tagDiv = document.getElementById("tagArea");

            //target the checkbox in the checkbox area with the matching ID and check it
            const checkAdd = document.getElementById(`input-${skillIDExisting}`);
            console.log(checkAdd);
            checkAdd.checked = true;

            //add the values to the map
            newlyClickedValues.set(parseInt(skillIDExisting, 10), skillNameExisting);

        }
    };


    // Function: when a user has clicked a value, add them to the list
    const onCheckboxClick = (skillId) => {

        var ele = document.getElementById(`input-${skillId}`);
        console.log(ele);

        const skillName = document.getElementById(`input-${skillId}`).getAttribute("skillName");

        //the container where the buttons will go
        const tagDiv = document.getElementById("tagArea");

        if (ele.checked) {
            console.log(`Skill ${skillId} was clicked.`);

            newlyClickedValues.set(skillId, skillName);

            let tag = document.createElement("span");

            tag.innerHTML = skillName;

            tag.skillIdValue = skillId;

            tag.setAttribute('id', skillId);

            document.getElementById("tagArea").appendChild(tag);

            //input button within the new span
            let btn = document.createElement("i");

            btn.skillIdValue = skillId;
            btn.setAttribute("onclick", `onTagRemove(${skillId})`);

            document.getElementById(`${skillId}`).innerHTML = (skillName + `<i onclick="onTagRemove(${skillId})" class="fa fa-times-circle"> </i>`);

            console.log(newlyClickedValues);
        }
        else {
            document.getElementById(`${skillId}`).remove();
            newlyClickedValues.delete(skillId);
            console.log(newlyClickedValues);

        }
    };

    // Functions: When a tag's X is removed, update the state
    const onTagRemove = (skillId) => {
        // TODO: remove skill from clicked values map so the tag disappears

        //set the checkbox to unchecked
        const rem = document.getElementById(`input-${skillId}`);
        rem.checked = false;

        //remove the span and its child button
        document.getElementById(`${skillId}`).remove();

        //update the map
        newlyClickedValues.delete(skillId);

        console.log(newlyClickedValues);
        // TODO: set the checkbox to be un-checked so the form is updated as well
    };

    //const specialButtonClick = () => {
    //
    //    const el = document.getElementById("input-1087"); // get an element by its unique id
    //    console.log(el.value, el.getAttribute("myCustomValue")); // get a custom attribute on an element
    //    el.click(); // click an element
    //    el.setAttribute("checked", false); // set the checkbox to be unchecked
    //};

    const myFunction = () => {
        // Declare variables
        var input, filter, table, tr, td, i, txtValue;
        input = document.getElementById("myInput");
        filter = input.value.toUpperCase();
        table = document.getElementById("myTable");
        tr = table.getElementsByTagName("tr");

        console.log(input + filter + table);

        // Loop through all table rows, and hide those who don't match the search query
        for (i = 0; i < tr.length; i++) {
            td = tr[i].getElementsByTagName('label')[0];
            console.log(td);
            if (td) {
                txtValue = td.textContent || td.innerText;
                if (txtValue.toUpperCase().indexOf(filter) > -1) {
                    tr[i].style.display = "";
                } else {
                    tr[i].style.display = "none";
                }
            }
        }
    };

    const searchUsers = () => {
        // Declare variables
        var input, filter, table, tr, td, i, txtValue;
        input = document.getElementById("myInput2");
        filter = input.value.toUpperCase();
        table = document.getElementById("cards");
        card = table.getElementsByClassName('card');

        console.log(input + filter + table);

        // Loop through all table rows, and hide those who don't match the search query
        for (i = 0; i < card.length; i++) {
            td = card[i].getElementsByTagName('h5')[0];
            console.log(td);
            if (td) {
                txtValue = td.textContent || td.innerText;
                if (txtValue.toUpperCase().indexOf(filter) > -1) {
                    card[i].style.display = "";
                } else {
                    card[i].style.display = "none";
                }
            }
        }
    };

    document.addEventListener("DOMContentLoaded", existingSkills);
</script>


<div class="people">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/">Home</a></li>
        <li class="breadcrumb-item active" aria-current="page">People</li>
    </ol>
    <aside>
        <h3>Filter by Skills

            @{
                if (Model.SelectedSkills != null)
                {
                            <a style="float: right;" asp-page="AllProfiles" class="btn btn-primary">Clear Filters</a>
                }
            }
        </h3>

        <form asp-page="AllProfiles">
            <div class="skillCheck">
                <input type="search" id="myInput" onkeyup="myFunction()" placeholder="Search for skills.." />
                <table id="myTable">

                    @{
                        foreach (var skill in Model.SkillsDisplay)
                        {
                                        <tr>
                                            <td>
                                                <input onclick="onCheckboxClick(@skill.SkillID)" class="form-check-input" name="SelectedSkills" type="checkbox" id="input-@skill.SkillID" value="@skill.SkillID" skillName="@skill.SkillName" />
                                                <label>@skill.SkillName</label>
                                            </td>
                                        </tr>
                        }
                    }

                </table>
            </div>
            <div class="space">
            </div>
            <button class="apply" type="submit">Apply</button>
        </form>

    </aside>


    <div class="cards" id="cards">
        <div class="title">
            <h2>Browse People</h2>
        </div>
        <input type="text" id="myInput2" onkeyup="searchUsers()" placeholder="Search for Other Members..." />
        <div class="card-deck">
            <div id="tagArea" style="height: unset">
                @{
                    if (Model.skillsAlreadySelected != null)
                    {
                        foreach (var skill in Model.skillsAlreadySelected)
                        {
                                        <span id="@skill.SkillID">@skill.SkillName<i onclick="onTagRemove(@skill.SkillID)" class="fa fa-times-circle"></i></span>
                        }
                    }
                }
            </div>
            <div class="row row-cols-1 row-cols-md-2 g-2">
                @{
                    if (@Model.SelectedSkills != null)
                    {

                        while (Model.returnReader.Read())
                        {

                            string picturepath = "";
                            Console.WriteLine(Model.returnReader["ProfilePicturePath"]);
                            if (!Model.returnReader["ProfilePicturePath"].Equals(""))
                            {
                                picturepath = "/uploads/" + Model.returnReader["ProfilePicturePath"];
                            }
                                        <div class="col">
                                            <div class="card" style="border-radius: 15px;">
                                                <div class="card-body p-4">
                                                    <div class="d-flex text-black">
                                                        <div class="flex-shrink-0">

                                                            @{
                                                    if (!picturepath.Equals(""))
                                                    {
                                                                                <img src="@picturepath" alt="User Image" class="img-fluid" style="width: 100px; border-radius: 10px;">
                                                    }
                                                    else
                                                    {
                                                                                <img src="~/images/User.png" alt="Generic placeholder image" class="img-fluid"
                                         style="width: 100px; border-radius: 10px;">
                                                    }
                                                            }


                                                        </div>
                                                        <div class="flex-grow-1 ms-3">
                                                            <div class="icon">
                                                                <a asp-page="MessageThread" asp-route-UserID="@Model.returnReader["UserID"]">
                                                                    <svg id="messageIcon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="#9582AA" class="bi bi-chat" viewBox="0 0 16 16">
                                                                        <path d="M2.678 11.894a1 1 0 0 1 .287.801 10.97 10.97 0 0 1-.398 2c1.395-.323 2.247-.697 2.634-.893a1 1 0 0 1 .71-.074A8.06 8.06 0 0 0 8 14c3.996 0 7-2.807 7-6 0-3.192-3.004-6-7-6S1 4.808 1 8c0 1.468.617 2.83 1.678 3.894zm-.493 3.905a21.682 21.682 0 0 1-.713.129c-.2.032-.352-.176-.273-.362a9.68 9.68 0 0 0 .244-.637l.003-.01c.248-.72.45-1.548.524-2.319C.743 11.37 0 9.76 0 8c0-3.866 3.582-7 8-7s8 3.134 8 7-3.582 7-8 7a9.06 9.06 0 0 1-2.347-.306c-.52.263-1.639.742-3.468 1.105z" />
                                                                    </svg>
                                                                </a>
                                                            </div>
                                                            <h5 class="mb-1">@Model.returnReader["FirstName"] @Model.returnReader["LastName"]</h5>
                                                            <p class="mb-2 pb-1" style="color: #2b2a2a;"><b>Position: </b>@Model.returnReader["Position"]</p>

                                                            <p class="" style="color: #2b2a2a;"><b>Skills:</b></p>
                                                            <div style="justify-content: flex-start; overflow-wrap: anywhere; flex-wrap: wrap;" class="d-flex justify-content-aroundrounded-3 p-2 mb-2">


                                                                @{
                                                        string sqlQuery = "SELECT TOP(4) Skills.SkillName from Skills where Skills.SkillID in(Select SkillsAssociation.SkillID from SkillsAssociation where SkillsAssociation.UserID in(SELECT users.UserID FROM Users WHERE users.UserID = " + @Model.returnReader["UserID"] + "));";

                                                        SqlDataReader QueryResults = DBClass.GeneralReaderQuery(sqlQuery);

                                                        while (QueryResults.Read())
                                                        {
                                                                                    <h6>
                                                                                        @QueryResults["SkillName"]
                                                                                    </h6>

                                                        }

                                                        QueryResults.Close();
                                                        DBClass.CloseGlobalConnection();


                                                                }
                                                            </div>
                                                            <div class="view">
                                                                <a asp-page="EditUser" asp-route-email="@Model.returnReader["Email"]" class="btn btn-primary">View Profile</a>
                                                                <a asp-page="/ProjectsPages/ProjectInvite" asp-route-UserID="@Model.returnReader["UserID"]" class="btn btn-primary">Invite</a>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                        }
                        Model.returnReader.Close();
                        DBClass.CloseGlobalConnection();
                    }
                    else
                    {
                        foreach (var user in Model.UserList)
                        {

                            //run a query to get their skill names (top5?) and display them in replacement of the pills
                            string picturepath = "";
                            Console.WriteLine(user.ProfilePicturePath);
                            if (!user.ProfilePicturePath.Equals(""))
                            {
                                picturepath = "/uploads/" + user.ProfilePicturePath;
                            }
                                        <div class="col">
                                            <div class="card" style="border-radius: 15px;">
                                                <div class="card-body p-4">
                                                    <div class="d-flex text-black">
                                                        <div class="flex-shrink-0">
                                                            @{
                                                    if (!picturepath.Equals(""))
                                                    {
                                                                                <img src="@picturepath" alt="User Image" class="img-fluid" style="width: 100px; border-radius: 10px;">
                                                    }
                                                    else
                                                    {
                                                                                <img src="~/images/User.png" alt="Generic placeholder image" class="img-fluid"
                                         style="width: 100px; border-radius: 10px;">
                                                    }
                                                            }
                                                        </div>
                                                        <div class="flex-grow-1 ms-3">
                                                            <div class="icon">
                                                                <a asp-page="MessageThread" asp-route-UserID="@user.UserID">
                                                                    <svg id="messageIcon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="#9582AA" class="bi bi-chat" viewBox="0 0 16 16">
                                                                        <path d="M2.678 11.894a1 1 0 0 1 .287.801 10.97 10.97 0 0 1-.398 2c1.395-.323 2.247-.697 2.634-.893a1 1 0 0 1 .71-.074A8.06 8.06 0 0 0 8 14c3.996 0 7-2.807 7-6 0-3.192-3.004-6-7-6S1 4.808 1 8c0 1.468.617 2.83 1.678 3.894zm-.493 3.905a21.682 21.682 0 0 1-.713.129c-.2.032-.352-.176-.273-.362a9.68 9.68 0 0 0 .244-.637l.003-.01c.248-.72.45-1.548.524-2.319C.743 11.37 0 9.76 0 8c0-3.866 3.582-7 8-7s8 3.134 8 7-3.582 7-8 7a9.06 9.06 0 0 1-2.347-.306c-.52.263-1.639.742-3.468 1.105z" />
                                                                    </svg>
                                                                </a>
                                                            </div>
                                                            <h5 class="mb-1">@user.FirstName @user.LastName</h5>

                                                            <p class="mb-2 pb-1" style="color: #2b2a2a;"><b>Position: </b>@user.Position</p>
                                                            <p class="" style="color: #2b2a2a;"><b>Skills:</b></p>
                                                            <div style="justify-content: flex-start; overflow-wrap: anywhere; flex-wrap: wrap; margin-top: 0px;" class="d-flex justify-content-aroundrounded-3 p-2 mb-2">


                                                                @{
                                                        string sqlQuery = "SELECT TOP(4) Skills.SkillName from Skills where Skills.SkillID in(Select SkillsAssociation.SkillID from SkillsAssociation where SkillsAssociation.UserID in(SELECT users.UserID FROM Users WHERE users.UserID = " + user.UserID + "));";

                                                        SqlDataReader QueryResults = DBClass.GeneralReaderQuery(sqlQuery);

                                                        while (QueryResults.Read())
                                                        {
                                                                                    <h6>
                                                                                        @QueryResults["SkillName"]
                                                                                    </h6>

                                                        }

                                                        QueryResults.Close();
                                                        DBClass.CloseGlobalConnection();

                                                                }
                                                            </div>
                                                            <div class="view profile">
                                                                <a asp-page="EditUser" asp-route-email="@user.Email" class="btn btn-primary">View Profile</a>
                                                                <a asp-page="/ProjectsPages/ProjectInvite" asp-route-UserID="@user.UserID" class="btn btn-primary">Invite</a>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                        }
                    }
                }

            </div>
        </div>
    </div>
</div>
<br />
<br />







@*@page
@using Lab1.Pages.DB_Class;
@using System.Data.SqlClient;
@model Lab1.Pages.UsersPages.AllProfilesModel
@{
    ViewData["Title"] = "People";
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi" crossorigin="anonymous">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-OERcA2EqjJCMA+/3y+gxIOqMEjwtxJY7qPCqsdltbNJuaOe923+mo//f6V8Qbsw3" crossorigin="anonymous"></script>


<style>

    .apply {
        background: #9582aa;
        color: #f8f9fa;
        margin-bottom: 10px;
        display: flex;
        border-radius: 8px;
        padding-left: 10px;
        padding-right: 10px;
        padding-top: 5px;
        padding-bottom: 5px;
        border: 5px;
    }

    .btn-primary {
        background-color: #31184C;
        border: #31184C;
    }

        .btn-primary:hover {
            background-color: #9582AA;
        }

    .btn-secondary {
        background-color: #9582AA
    }

    .people {
        display: grid;
        margin: 0 auto;
        max-width: 1500px;
        grid-template-columns: repeat(12, 1fr);
        padding: 20px;
        padding-inline-start: 2%;
        background-color: #eae6ee;
    }

    aside {
        grid-column: 1/5;
        background-color: white;
        padding: 20px;
        border-style: solid;
        border-width: .5px;
        border-color: lightslategray;
        border-radius: 10px;
    }

    .cards {
        grid-column: 5/13;
        background-color: #EAE6EE;
        padding: 20px;
        border-radius: 10px;
    }

    h6 {
        background-color: #ddd;
        height: fit-content;
        width: fit-content;
        border: none;
        color: black;
        padding: 2px 8px;
        white-space: nowrap;
        position: relative;
        text-align: start;
        text-decoration: none;
        display: inline-flex;
        margin: 4px 2px;
        border-radius: 16px;
        box-sizing: border-box;
        font-size: 12px;
        font-family: Helvetica, sans-serif;
        overflow-wrap: break-word;
    }

    .d-flex {
        display: flex;
        justify-content: space-around;
        align-items: center;
    }

    .card {
        border: none;
        gap: 10px;
    }

    h5 {
        font-family: Helvetica, Sans-Serif;
        font-weight: bold;
        color: #31184C;
    }

    p {
        font-family: Helvetica, Sans-Serif;
        color: grey;
    }

    .skillTags {
        display: flex;
        justify-content: flex-start;
        overflow-wrap: anywhere;
        flex-wrap: wrap;
        align-content: flex-start;
    }

    @@media only screen and (min-width: 620px) {


        aside {
            grid-column: 1/4;
        }

        .cards {
            grid-column: 4/13;
        }
    }

    @@media only screen and (min-width: 900px) {


        aside {
            grid-column: 1/4;
        }

        .cards {
            grid-column: 4/13;
        }
    }

    #myTable {
        padding: 10px;
        grid-column: 1/4;
    }

    .filterButton {
        background-color: #31184C;
        border: #31184C;
        color: white;
    }

    .space {
        padding: 20px;
    }

    #peopleTab {
        color: #d8ec91;
    }

    .form-check-input:checked {
        background-color: #31184C;
    }

    .view{
        display: inline;
    }
</style>

<script>

    // list of values the user has clicked
    const newlyClickedValues = new Map();


    function existingSkills() {
        console.log("running on load");


        //I need to loop through each row in the table and get the Skill ID and the Skill name to add to the map
        //check those boxes, and ensure the pills display

        var existingList = document.getElementById('tagArea').getElementsByTagName('span');
        console.log(existingList);

        for (i = 0; i < existingList.length; i++) {
            const skillNameExisting = existingList[i].innerText;
            const skillIDExisting = existingList[i].id;

            console.log(skillIDExisting);

            const tagDiv = document.getElementById("tagArea");

            //target the checkbox in the checkbox area with the matching ID and check it
            const checkAdd = document.getElementById(`input-${skillIDExisting}`);
            console.log(checkAdd);
            checkAdd.checked = true;

            //add the values to the map
            newlyClickedValues.set(parseInt(skillIDExisting, 10), skillNameExisting);

        }
    };


    // Function: when a user has clicked a value, add them to the list
    const onCheckboxClick = (skillId) => {

        var ele = document.getElementById(`input-${skillId}`);
        console.log(ele);

        const skillName = document.getElementById(`input-${skillId}`).getAttribute("skillName");

        //the container where the buttons will go
        const tagDiv = document.getElementById("tagArea");

        if (ele.checked) {
            console.log(`Skill ${skillId} was clicked.`);

            newlyClickedValues.set(skillId, skillName);

            let tag = document.createElement("span");

            tag.innerHTML = skillName;

            tag.skillIdValue = skillId;

            tag.setAttribute('id', skillId);

            document.getElementById("tagArea").appendChild(tag);

            //input button within the new span
            let btn = document.createElement("i");

            btn.skillIdValue = skillId;
            btn.setAttribute("onclick", `onTagRemove(${skillId})`);

            document.getElementById(`${skillId}`).innerHTML = (skillName + `<i onclick="onTagRemove(${skillId})" class="fa fa-times-circle"> </i>`);

            console.log(newlyClickedValues);
        }
        else {
            document.getElementById(`${skillId}`).remove();
            newlyClickedValues.delete(skillId);
            console.log(newlyClickedValues);

        }
    };

    // Functions: When a tag's X is removed, update the state
    const onTagRemove = (skillId) => {
        // TODO: remove skill from clicked values map so the tag disappears

        //set the checkbox to unchecked
        const rem = document.getElementById(`input-${skillId}`);
        rem.checked = false;

        //remove the span and its child button
        document.getElementById(`${skillId}`).remove();

        //update the map
        newlyClickedValues.delete(skillId);

        console.log(newlyClickedValues);
        // TODO: set the checkbox to be un-checked so the form is updated as well
    };

    //const specialButtonClick = () => {
    //
    //    const el = document.getElementById("input-1087"); // get an element by its unique id
    //    console.log(el.value, el.getAttribute("myCustomValue")); // get a custom attribute on an element
    //    el.click(); // click an element
    //    el.setAttribute("checked", false); // set the checkbox to be unchecked
    //};

    const myFunction = () => {
        // Declare variables
        var input, filter, table, tr, td, i, txtValue;
        input = document.getElementById("myInput");
        filter = input.value.toUpperCase();
        table = document.getElementById("myTable");
        tr = table.getElementsByTagName("tr");

        console.log(input + filter + table);

        // Loop through all table rows, and hide those who don't match the search query
        for (i = 0; i < tr.length; i++) {
            td = tr[i].getElementsByTagName('label')[0];
            console.log(td);
            if (td) {
                txtValue = td.textContent || td.innerText;
                if (txtValue.toUpperCase().indexOf(filter) > -1) {
                    tr[i].style.display = "";
                } else {
                    tr[i].style.display = "none";
                }
            }
        }
    };

    const searchUsers = () => {
        // Declare variables
        var input, filter, table, tr, td, i, txtValue;
        input = document.getElementById("myInput2");
        filter = input.value.toUpperCase();
        table = document.getElementById("cards");
        card = table.getElementsByClassName('card');

        console.log(input + filter + table);

        // Loop through all table rows, and hide those who don't match the search query
        for (i = 0; i < card.length; i++) {
            td = card[i].getElementsByTagName('h5')[0];
            console.log(td);
            if (td) {
                txtValue = td.textContent || td.innerText;
                if (txtValue.toUpperCase().indexOf(filter) > -1) {
                    card[i].style.display = "";
                } else {
                    card[i].style.display = "none";
                }
            }
        }
    };

    document.addEventListener("DOMContentLoaded", existingSkills);
</script>


<div class="people">
    <aside>
        <h3>Filter by Skills</h3>

        <form asp-page="AllProfiles">
            <div class="skillCheck">
                <input type="search" id="myInput" onkeyup="myFunction()" placeholder="Search for skills.." />
                <table id="myTable">

                    @{
                        foreach (var skill in Model.SkillsDisplay)
                        {
                                    <tr>
                                        <td>
                                            <input onclick="onCheckboxClick(@skill.SkillID)" class="form-check-input" name="SelectedSkills" type="checkbox" id="input-@skill.SkillID" value="@skill.SkillID" skillName="@skill.SkillName" />
                                            <label>@skill.SkillName</label>
                                        </td>
                                    </tr>
                        }
                    }

                </table>
            </div>
            <div class="space">
            </div>
            <button class="apply" type="submit">Submit</button>
        </form>


        @{
            if (Model.SelectedSkills != null)
            {
                        <a asp-page="AllProfiles" class="btn btn-primary">Clear Filters</a>
            }
        }
    </aside>


    <div class="cards" id="cards">
        <div class="title">
            <h2>Browse People</h2>
        </div>
        <input type="text" id="myInput2" onkeyup="searchUsers()" placeholder="Search for Other Members..." />
        <div class="card-deck">
            <div id="tagArea" style="height: unset">
                @{
                    if (Model.skillsAlreadySelected != null)
                    {
                        foreach (var skill in Model.skillsAlreadySelected)
                        {
                                    <span id="@skill.SkillID">@skill.SkillName<i onclick="onTagRemove(@skill.SkillID)" class="fa fa-times-circle"></i></span>
                        }
                    }
                }
            </div>
            <div class="row row-cols-1 row-cols-md-2 g-2">
                @{
                    if (@Model.SelectedSkills != null)
                    {

                        while (Model.returnReader.Read())
                        {

                            string picturepath = "";
                            Console.WriteLine(Model.returnReader["ProfilePicturePath"]);
                            if (!Model.returnReader["ProfilePicturePath"].Equals(""))
                            {
                                picturepath = "/uploads/" + Model.returnReader["ProfilePicturePath"];
                            }
                                    <div class="col">
                                        <div class="card" style="border-radius: 15px;">
                                            <div class="card-body p-4">
                                                <div class="d-flex text-black">
                                                    <div class="flex-shrink-0">

                                                        @{
                                                    if (!picturepath.Equals(""))
                                                    {
                                                                        <img src="@picturepath" alt="User Image" class="img-fluid" style="width: 100px; border-radius: 10px;">
                                                    }
                                                    else
                                                    {
                                                                        <img src="~/images/User.png" alt="Generic placeholder image" class="img-fluid"
                                         style="width: 100px; border-radius: 10px;">
                                                    }
                                                        }


                                                    </div>
                                                    <div class="flex-grow-1 ms-3">
                                                        <h5 class="mb-1">@Model.returnReader["FirstName"] @Model.returnReader["LastName"]</h5>
                                                        <p class="mb-2 pb-1" style="color: #2b2a2a;">@Model.returnReader["Position"]</p>
                                                        <div style="justify-content: flex-start; overflow-wrap: anywhere; flex-wrap: wrap;" class="d-flex justify-content-aroundrounded-3 p-2 mb-2">

                                                            @{
                                                        string sqlQuery = "SELECT TOP(4) Skills.SkillName from Skills where Skills.SkillID in(Select SkillsAssociation.SkillID from SkillsAssociation where SkillsAssociation.UserID in(SELECT users.UserID FROM Users WHERE users.UserID = " + @Model.returnReader["UserID"] + "));";

                                                        SqlDataReader QueryResults = DBClass.GeneralReaderQuery(sqlQuery);

                                                        while (QueryResults.Read())
                                                        {
                                                                            <h6>
                                                                                @QueryResults["SkillName"]
                                                                            </h6>

                                                        }

                                                        QueryResults.Close();
                                                        DBClass.CloseGlobalConnection();


                                                            }
                                                        </div>
                                                        <div class="view">
                                                            <p> <a asp-page="EditUser" asp-route-email="@Model.returnReader["Email"]" class="simpleButton">View Profile</a> </p>
                                                            <p> <a asp-page="/ProjectsPages/ProjectInvite" asp-route-UserID="@Model.returnReader["UserID"]" class="simpleButton">Invite to my projects</a> </p>
                                                        </div>
                                                        <div class="d-flex pt-1">
                                                            <a asp-page="MessageThread" asp-route-UserID="@Model.returnReader["UserID"]">
                                                                <svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" fill="#31184C" class="bi bi-send" viewBox="0 0 16 16">
                                                                    <path d="M15.854.146a.5.5 0 0 1 .11.54l-5.819 14.547a.75.75 0 0 1-1.329.124l-3.178-4.995L.643 7.184a.75.75 0 0 1 .124-1.33L15.314.037a.5.5 0 0 1 .54.11ZM6.636 10.07l2.761 4.338L14.13 2.576 6.636 10.07Zm6.787-8.201L1.591 6.602l4.339 2.76 7.494-7.493Z" />
                                                                </svg>
                                                            </a>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                        }
                        Model.returnReader.Close();
                        DBClass.CloseGlobalConnection();
                    }
                    else
                    {
                        foreach (var user in Model.UserList)
                        {

                            //run a query to get their skill names (top5?) and display them in replacement of the pills
                            string picturepath = "";
                            Console.WriteLine(user.ProfilePicturePath);
                            if (!user.ProfilePicturePath.Equals(""))
                            {
                                picturepath = "/uploads/" + user.ProfilePicturePath;
                            }
                                    <div class="col">
                                        <div class="card" style="border-radius: 15px;">
                                            <div class="card-body p-4">
                                                <div class="d-flex text-black">
                                                    <div class="flex-shrink-0">
                                                        @{
                                                    if (!picturepath.Equals(""))
                                                    {
                                                                        <img src="@picturepath" alt="User Image" class="img-fluid" style="width: 100px; border-radius: 10px;">
                                                    }
                                                    else
                                                    {
                                                                        <img src="~/images/User.png" alt="Generic placeholder image" class="img-fluid"
                                         style="width: 100px; border-radius: 10px;">
                                                    }
                                                        }
                                                    </div>
                                                    <div class="flex-grow-1 ms-3">
                                                        <h5 class="mb-1">@user.FirstName @user.LastName</h5>
                                                        <p class="mb-2 pb-1" style="color: #2b2a2a;">@user.Position</p>
                                                        <div style="justify-content: flex-start; overflow-wrap: anywhere; flex-wrap: wrap;" class="d-flex justify-content-aroundrounded-3 p-2 mb-2">

                                                            @{
                                                        string sqlQuery = "SELECT TOP(4) Skills.SkillName from Skills where Skills.SkillID in(Select SkillsAssociation.SkillID from SkillsAssociation where SkillsAssociation.UserID in(SELECT users.UserID FROM Users WHERE users.UserID = " + user.UserID + "));";

                                                        SqlDataReader QueryResults = DBClass.GeneralReaderQuery(sqlQuery);

                                                        while (QueryResults.Read())
                                                        {
                                                                            <h6>
                                                                                @QueryResults["SkillName"]
                                                                            </h6>

                                                        }

                                                        QueryResults.Close();
                                                        DBClass.CloseGlobalConnection();

                                                            }
                                                        </div>
                                                        <div class="view">
                                                            <p> <a asp-page="EditUser" asp-route-email="@user.Email" class="simpleButton">View Profile</a> </p>
                                                            <p> <a asp-page="/ProjectsPages/ProjectInvite" asp-route-UserID="@user.UserID" class="simpleButton">Invite to my projects</a> </p>
                                                        </div>
                                                        <div class="d-flex pt-1">
                                                            <a asp-page="MessageThread" asp-route-UserID="@user.UserID">
                                                                <svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" fill="#31184C" class="bi bi-send" viewBox="0 0 16 16">
                                                                    <path d="M15.854.146a.5.5 0 0 1 .11.54l-5.819 14.547a.75.75 0 0 1-1.329.124l-3.178-4.995L.643 7.184a.75.75 0 0 1 .124-1.33L15.314.037a.5.5 0 0 1 .54.11ZM6.636 10.07l2.761 4.338L14.13 2.576 6.636 10.07Zm6.787-8.201L1.591 6.602l4.339 2.76 7.494-7.493Z" />
                                                                </svg>
                                                            </a>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                        }
                    }
                }

            </div>
        </div>
    </div>
</div>
<br />
<br />

*@