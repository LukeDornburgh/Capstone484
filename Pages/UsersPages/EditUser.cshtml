@page "{UserID}"
@using System.Data.SqlClient
@using Lab1.Pages.DB_Class;
@model Lab1.Pages.UsersPages.EditUserModel
@{
    ViewData["Title"] = "Edit User";
}
<i class="fa-solid fa-x"></i>
<form asp-page="EditUser" method="post">
    <input type="hidden" asp-for="@Model.UserToUpdate.UserID" />
    <label asp-for="@Model.UserToUpdate.FirstName"></label>
    <input type="text" asp-for="@Model.UserToUpdate.FirstName" />
    <br />
    <label asp-for="@Model.UserToUpdate.LastName"></label>
    <input type="text" asp-for="@Model.UserToUpdate.LastName" />
    <br />
    <label asp-for="@Model.UserToUpdate.Email"></label>
    <input type="text" asp-for="@Model.UserToUpdate.Email" />
    <br />
    <label asp-for="@Model.UserToUpdate.ProfessionalEmail"></label>
    <input type="text" asp-for="@Model.UserToUpdate.ProfessionalEmail" />
    <br />
    <label asp-for="@Model.UserToUpdate.Position"></label>
    <input type="text" asp-for="@Model.UserToUpdate.Position" />
    <br /><br />
    @*<table class="table table-bordered table-hover table-responsive" style="float: right;">
        <thead>
            <tr>
                <th>My Skills</th>
            </tr>
        </thead>
        <tbody>
            @{
                string sqlQuery = "SELECT Skills.SkillName from Skills where Skills.SkillID in(Select SkillsAssociation.SkillID from SkillsAssociation where SkillsAssociation.UserID in(SELECT users.UserID FROM Users WHERE users.UserID = " + @Model.UserToUpdate.UserID + "));";

                SqlDataReader QueryResults = DBClass.GeneralReaderQuery(sqlQuery);

                while (QueryResults.Read())
                {
                                    <tr>
                                        <td>@QueryResults["SkillName"]</td>
                                    </tr>
                }

                                <div id="tagListParent">
                                    while {
                                <div custom data here>childDiv</div>
                                                         }
                                </div>
            }

        </tbody>
    </table>*@
    <h5>Add skill to this user</h5>


    <script>
        
        // list of values the user has clicked
        const newlyClickedValues = new Map();

        // TODO: Get the existing tags list
        //document.getElementById().chil

        // TODO: Update checkboxes of already existing tags


        // Function: when a user has clicked a value, add them to the list
        const onCheckboxClick = (skillId) => {
            
            var ele = document.getElementById(`input-${skillId}`);

            const skillName = document.getElementById(`input-${skillId}`).getAttribute("skillName");

            //the container where the buttons will go
            const tagDiv = document.getElementById("tagArea");

            if (ele.checked){
                console.log(`Skill ${skillId} was clicked.`);

                newlyClickedValues.set(skillId, skillName);

                let tag = document.createElement("span");

                tag.innerHTML = skillName;

                tag.skillIdValue = skillId;

                tag.setAttribute('id', skillId);

                document.getElementById("tagArea").appendChild(tag);

                //input button within the new span
                let btn = document.createElement("i");

                btn.skillIdValue = skillId;
                btn.setAttribute("onclick", `onTagRemove(${skillId})`);

                document.getElementById(`${skillId}`).innerHTML = (skillName + `<i onclick="onTagRemove(${skillId})" class="fa fa-times-circle"> </i>`);

                console.log(newlyClickedValues);
            }
            else{
                document.getElementById(`${skillId}`).remove();
                newlyClickedValues.delete(skillId);
                console.log(newlyClickedValues);

            }
        };

        // Functions: When a tag's X is removed, update the state
        const onTagRemove = (skillId) => {
            // TODO: remove skill from clicked values map so the tag disappears

            //set the checkbox to unchecked
            const rem = document.getElementById(`input-${skillId}`);
            rem.checked = false;

            //remove the span and its child button
            document.getElementById(`${skillId}`).remove();

            //update the map
            newlyClickedValues.delete(skillId);

            console.log(newlyClickedValues);
            // TODO: set the checkbox to be un-checked so the form is updated as well
        };

        //const specialButtonClick = () => {
        //
        //    const el = document.getElementById("input-1087"); // get an element by its unique id
        //    console.log(el.value, el.getAttribute("myCustomValue")); // get a custom attribute on an element
        //    el.click(); // click an element
        //    el.setAttribute("checked", false); // set the checkbox to be unchecked
        //};

        const myFunction = () => {
            // Declare variables
            var input, filter, table, tr, td, i, txtValue;
            input = document.getElementById("myInput");
            filter = input.value.toUpperCase();
            table = document.getElementById("myTable");
            tr = table.getElementsByTagName("tr");

            console.log(input + filter + table);

            // Loop through all table rows, and hide those who don't match the search query
            for (i = 0; i < tr.length; i++) {
                td = tr[i].getElementsByTagName('label')[0];
                console.log(td);
                if (td) {
                    txtValue = td.textContent || td.innerText;
                    if (txtValue.toUpperCase().indexOf(filter) > -1) {
                        tr[i].style.display = "";
                    } else {
                        tr[i].style.display = "none";
                    }
                }
            }
        };
        

    </script>

    <div class="skillCheck">
    <input type="text" id="myInput" onkeyup="myFunction()" placeholder="Search for skills.." />
    <table id="myTable">
        
                @{

                    if (Model.searchText != null)
                    {
                        SqlDataReader QueryResults1 = DBClass.SkillSearch(Model.searchText);
                        while (QueryResults1.Read())
                        {
                                                             <tr>
                                                               <td>
                                                                <input onclick="onCheckboxClick(@QueryResults1["SkillID"])" id="input-@QueryResults1["SkillID"]" class="form-check-input" skillName="@QueryResults1["SkillName"]" name="SelectedSkills" type="checkbox" value="@QueryResults1["SkillID"]" />
                                                                <label>@QueryResults1["SkillName"]</label>
                                                               </td> 
                                                             </tr>
                        }
                    }
                    else{                
                        foreach (var skill in Model.SkillsDisplay)
                        {
                                                             <tr>
                                                               <td>
                                                                <input onclick="onCheckboxClick(@skill.SkillID)" class="form-check-input" name="SelectedSkills" type="checkbox" id="input-@skill.SkillID" value="@skill.SkillID" skillName="@skill.SkillName" />
                                                                <label>@skill.SkillName</label>
                                                               </td> 
                                                             </tr>
                        }       
                    }
                 }

    </table>
    </div>
    <h5>My Skills</h5>
    <div id="tagArea">
        
        
    </div>



    <!------------------------------------------------------------------------------------>
    <h5 style="clear:both">Join a Team</h5>
    <select name="TeamIDSelected" class="form-select">
        <option value="">Select a Team</option>
        @{
            foreach (var team in Model.TeamsToDisplay)
            {
                                                                                                                                                                                                                                                                                          <option value=@team.TeamID>@team.TeamName</option>
            }
        }
    
    </select>
    <button id="formSubmitButton" type="submit" asp-route-UserID="@Model.UserToUpdate.UserID" class="btn btn-success" asp-page="EditUser">Submit</button>
    <!-- <input type="button" id="specialButton" onclick="specialButtonClick()" value="Super special button"> -->
    <a asp-page="Index" class="btn btn-secondary">Cancel</a>
</form>

<br />
<br />
<br />
<br />
<br/>