@page
@using System.Data.SqlClient
@using Lab1.Pages.DB_Class;
@model Lab1.Pages.UsersPages.EditUserModel
@{
    ViewData["Title"] = "Edit User";
}

<style>
    img {
        max-width: 250px;
        max-height: 100%;
        padding: 10px;
        border-radius: 10%;
        align-items: center;
    }

    .divider {
        color: #9582AA;
    }

    .navbtn {
        background: #9582AA;
        border-radius: 8px;
        border: 5px;
        padding: 5px;
        color: white;
    }

    .profile {
        display: grid;
        margin: 0 auto;
        max-width: 1500px;
        grid-template-columns: repeat(12, 1fr);
        grid-template-rows: repeat(9, 1fr);
        gap: 20px 20px;
        background-color: #eae6ee;
        padding: 30px;
    }

    .pix {
        grid-column: 1/13;
        grid-row: 1/3;
        display: flex;
        background-color: white;
        border-radius: 20px;
        padding: 20px;
        justify-content: space-around;
        display: block;
        margin-left: auto;
        margin-right: auto;
    }


    .skills {
        grid-column: 1/13;
        grid-row: 3/4;
        background-color: white;
        border-radius: 20px;
        padding: 20px;
    }

    .icons {
        grid-column: 1/13;
        grid-row: 4/5;
        display: flex;
        justify-content: space-around;
        background-color: white;
        border-radius: 20px;
        align-items: center;
    }

    .bio {
        grid-column: 1/13;
        grid-row: 5/7;
        background-color: white;
        border-radius: 20px;
        padding: 20px;
    }

    .avail {
        grid-column: 1/13;
        grid-row: 7/8;
        background-color: white;
        border-radius: 20px;
        padding: 20px;
    }

    .personalinterests {
        grid-column: 1/13;
        grid-row: 8/9;
        background-color: white;
        border-radius: 20px;
        padding: 20px;
    }

    .prointerests {
        grid-column: 1/13;
        grid-row: 9/10;
        background-color: white;
        border-radius: 20px;
        padding: 20px;
    }

    h3 {
        font-family: Helvetica, Sans-Serif;
        color: black;
        padding-left: 10px;
        font-size: medium;
    }


    .material-symbols-rounded {
        font-variation-settings: 'FILL' 1, 'wght' 400, 'GRAD' 0, 'opsz' 40, 'color' #31184C,
    }

    h5 {
        font-family: Helvetica, Sans-Serif;
        font-weight: bold;
        color: #31184C;
    }

    h2 {
        font-family: Helvetica, Sans-Serif;
        font-weight: bold;
        color: #31184C;
        padding-left: 10px;
        padding-top: 10px;
    }



    .btn-primary {
        background-color: #31184C;
        border: #31184C;
    }

        .btn-primary:hover {
            background-color: #9582AA;
        }

    .btn-secondary {
        background-color: #D8EC91;
        border: #D8EC91;
    }

    .btn-primary:hover {
        background-color: #9582AA;
    }

    .row {
        gap: 20px;
    }

    .picture {
        padding: 25px;
    }

    .icon {
        float: right;
    }

    #feedback {
        width: 40px; /* width of button */
        height: 40px; /* height of button */
        line-height: 30px;
        overflow: hidden;
        z-index: 999;
        cursor: pointer;
        transform: rotate(270deg); /* turns right arrow 270 degrees */
        position: fixed; /* fixed at bottom corner */
        bottom: 30px; /* distance from bottom */
        right: 40px; /* distance from right */
        padding: 4px 4px 13px 4px; /* padding around arrow */
        border-radius: 5px;
        background: #31184C; /* background with transparency */
        color: #eee; /* color of arrow */
        text-align: center;
        font-size: 20px; /* size of the arrow */
        text-decoration: none;
    }

        #feedback:link {
            background: #31184C;
            color: #eee;
        }

        #feedback:hover {
            background: #D8EC91;
            color: #ccc;
        }

        #feedback:active {
            background: #D8EC91;
            color: #eee;
        }

    @@media only screen and (min-width: 620px) {

        .profile {
            display: grid;
            margin: 0 auto;
            max-width: 1500px;
            grid-template-columns: repeat(12, 1fr);
            grid-template-rows: repeat(9, 1fr);
            gap: 20px 20px;
            background-color: #eae6ee;
            padding: 30px;
        }

        .pix {
            grid-column: 1/13;
            grid-row: 1/3;
            display: block;
            background-color: white;
            border-radius: 20px;
            padding: 20px;
        }


        .skills {
            grid-column: 1/13;
            grid-row: 3/4;
            background-color: white;
            border-radius: 20px;
            padding: 20px;
        }

        .icons {
            grid-column: 1/13;
            grid-row: 4/5;
            display: flex;
            justify-content: space-around;
            background-color: white;
            border-radius: 20px;
            align-items: center;
        }

        .bio {
            grid-column: 1/13;
            grid-row: 5/7;
            background-color: white;
            border-radius: 20px;
            padding: 20px;
        }

        .avail {
            grid-column: 1/13;
            grid-row: 7/8;
            background-color: white;
            border-radius: 20px;
            padding: 20px;
        }

        .personalinterests {
            grid-column: 1/13;
            grid-row: 8/9;
            background-color: white;
            border-radius: 20px;
            padding: 20px;
        }

        .prointerests {
            grid-column: 1/13;
            grid-row: 9/10;
            background-color: white;
            border-radius: 20px;
            padding: 20px;
        }
    }

    @@media only screen and (min-width: 900px) {


        .profile {
            padding: 10px;
            grid-template-columns: repeat(12, 1fr);
            grid-template-rows: repeat(6, 1fr);
            gap: 20px 20px;
        }

        .pix {
            grid-column: 3/6;
            grid-row: 1/4;
        }

        .skills {
            grid-column: 3/6;
            grid-row: 4/7;
        }

        .icons {
            grid-column: 6/11;
            grid-row: 1/2;
        }

        .bio {
            grid-column: 6/11;
            grid-row: 2/4;
        }

        .avail {
            grid-column: 6/11;
            grid-row: 4/5;
        }

        .personalinterests {
            grid-column: 6/11;
            grid-row: 5/6;
        }

        .prointerests {
            grid-column: 6/11;
            grid-row: 6/7;
        }
    }
</style>
    <table class="table table-bordered table-hover table-responsive" style="display: none">
        <thead>
            <tr>
                <th>My Skills</th>
            </tr>
        </thead>
        <tbody>
            @{
                string sqlQuery = "SELECT Skills.SkillName, Skills.SkillID from Skills where Skills.SkillID in(Select SkillsAssociation.SkillID from SkillsAssociation where SkillsAssociation.UserID in(SELECT users.UserID FROM Users WHERE users.UserID = " + @Model.UserToUpdate.UserID + "));";

                SqlDataReader QueryResults = DBClass.GeneralReaderQuery(sqlQuery);

                while (QueryResults.Read())
                {
                                    <tr>
                                        <td id="existing-@QueryResults["SkillID"]" existingID="@QueryResults["SkillID"]" existingSkillName="@QueryResults["SkillName"]">@QueryResults["SkillName"]</td>
                </tr>
            }
            QueryResults.Close();
            DBClass.CloseGlobalConnection();

            }

        </tbody>
    </table>
<form asp-page="EditUser" enctype="multipart/form-data" id="fullForm" method="post">
    <!-- Skills Modal -->
<div class="modal fade" id="staticBackdrop8" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title fs-5" id="staticBackdropLabel">Edit Skills</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
       

        <div class="skillCheck" style="width: 100%; float: left">
        <input type="text" id="myInput" onkeyup="myFunction()" placeholder="Search for skills.." />
        <table id="myTable">

            @{
                foreach (var skill in Model.SkillsDisplay)
                {
                        <tr>
                            <td>
                                <input onclick="onCheckboxClick(@skill.SkillID)" class="form-check-input" name="SelectedSkills" type="checkbox" id="input-@skill.SkillID" value="@skill.SkillID" skillName="@skill.SkillName" />
                                <label>@skill.SkillName</label>
                            </td>
                        </tr>
                }
            }

        </table>
    </div>
    <h5>My Skills</h5>
    <div id="tagArea" style="display: inline">
    </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="submit" class="btn btn-primary">Save</button>
      </div>
    </div>
  </div>
</div>
<div class="profile">

    <div class="pix">
        <div class="icon">
            <a ref="icon" class="icon" data-bs-toggle="modal" data-bs-target="#staticBackdrop">
            <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="#31184C" class="bi bi-pencil-square" viewBox="0 0 16 16">
            <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z"/>
            <path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z"/>
            </svg>
            </a>
        </div>
        <div class="picture">

            @{
                if (Model.ProfilePictureUrl != String.Empty)
                {
                        <img src="@Model.ProfilePictureUrl" width="500" height="250" />    
                }
                else{
                        <p>Upload an Image</p>
                }
            } 
            <h2> @Model.UserToUpdate.FirstName @Model.UserToUpdate.LastName</H2>
            <h3> <b>@Model.UserToUpdate.College</b></h3>
            <h3><b> Phone:</b> @Model.UserToUpdate.Phone</h3>
            <h3><b> Email:</b> @Model.UserToUpdate.Email</h3>
        </div>
    </div>

    <div class="skills">
<div class="skills">
<div class="icon">
  <a ref="icon" class="icon" data-bs-toggle="modal" data-bs-target="#staticBackdrop8">
      <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="#31184C" class="bi bi-pencil-square" viewBox="0 0 16 16">
          <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z"/>
          <path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z"/>
      </svg>
  </a>
  </div>
  <h5> Skills</h5>
  <div class="skillspills"></div>
    <div id="tagArea2">
    </div>
</div>

    </div>

    <div class="icons">
    <a asp-page="/ProjectsPages/MyProjects">
    <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" fill="#31184C" class="bi bi-folder-fill" viewBox="0 0 16 16">
        <path d="M9.828 3h3.982a2 2 0 0 1 1.992 2.181l-.637 7A2 2 0 0 1 13.174 14H2.825a2 2 0 0 1-1.991-1.819l-.637-7a1.99 1.99 0 0 1 .342-1.31L.5 3a2 2 0 0 1 2-2h3.672a2 2 0 0 1 1.414.586l.828.828A2 2 0 0 0 9.828 3zm-8.322.12C1.72 3.042 1.95 3 2.19 3h5.396l-.707-.707A1 1 0 0 0 6.172 2H2.5a1 1 0 0 0-1 .981l.006.139z"/>
      </svg>
    </a>
      
    <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" fill="#31184C" class="bi bi-send" viewBox="0 0 16 16">
        <path d="M15.854.146a.5.5 0 0 1 .11.54l-5.819 14.547a.75.75 0 0 1-1.329.124l-3.178-4.995L.643 7.184a.75.75 0 0 1 .124-1.33L15.314.037a.5.5 0 0 1 .54.11ZM6.636 10.07l2.761 4.338L14.13 2.576 6.636 10.07Zm6.787-8.201L1.591 6.602l4.339 2.76 7.494-7.493Z"/>
      </svg>

      <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" fill="#31184C" class="bi bi-calendar-event-fill" viewBox="0 0 16 16">
        <path d="M4 .5a.5.5 0 0 0-1 0V1H2a2 2 0 0 0-2 2v1h16V3a2 2 0 0 0-2-2h-1V.5a.5.5 0 0 0-1 0V1H4V.5zM16 14V5H0v9a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2zm-3.5-7h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5z"/>
      </svg>

      <a ref="icon" class="icon" data-bs-toggle="modal" data-bs-target="#staticBackdrop3">
        <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" fill="#31184C" class="bi bi-box-arrow-in-down" viewBox="0 0 16 16">
          <path fill-rule="evenodd" d="M3.5 6a.5.5 0 0 0-.5.5v8a.5.5 0 0 0 .5.5h9a.5.5 0 0 0 .5-.5v-8a.5.5 0 0 0-.5-.5h-2a.5.5 0 0 1 0-1h2A1.5 1.5 0 0 1 14 6.5v8a1.5 1.5 0 0 1-1.5 1.5h-9A1.5 1.5 0 0 1 2 14.5v-8A1.5 1.5 0 0 1 3.5 5h2a.5.5 0 0 1 0 1h-2z"/>
          <path fill-rule="evenodd" d="M7.646 11.854a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 10.293V1.5a.5.5 0 0 0-1 0v8.793L5.354 8.146a.5.5 0 1 0-.708.708l3 3z"/>
        </svg>
      </a>

          
 </div>

    <div class="bio">
        <div class="mb-3">
            <label for="exampleFormControlTextarea1" class="form-label"><h5>Biography</h5></label>
            <textarea readonly rows="8" class="form-control" id="biography1" >@Model.UserToUpdate.Bio</textarea>
        </div>
    </div>

    <div class="avail">
  <div class="mb-3">
      <label for="exampleFormControlTextarea1" class="form-label"><h5>General Availability</h5></label>
      <textarea readonly rows = "2" class="form-control" id="biography1" >@Model.UserToUpdate.GeneralAvailability</textarea>
    </div>
</div>

    <div class="personalinterests">
        <div class="mb-3">
            <label for="exampleFormControlTextarea1" class="form-label"><h5>Personal Interests</h5></label>
            <textarea readonly class="form-control" id="personalinterests1" rows="3">@Model.UserToUpdate.PersonalInterests</textarea>
        </div>

    </div>

    <div class="prointerests">
        <div class="mb-3">
            <label for="exampleFormControlTextarea1" class="form-label"><h5>Professional Interests</h5></label>
            <textarea readonly class="form-control" id="professionalinterests1" rows="3" >@Model.UserToUpdate.ProfessionalInterests</textarea>
        </div>
    </div>

    <!-- Button trigger modal -->
    <!-- Modal -->
    <!---->

        <div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title fs-5" id="staticBackdropLabel">Edit Profile</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                         <div class="mb-3">
                            <label asp-for="@Model.upload">Profile Picture</label>
                            <input type="file" asp-for="upload" />
                        </div>
                        <div class="mb-3">
                            <label for="exampleFormControlInput1" class="form-label"><h3>Edit First Name</h3></label>
                            <input type="hidden" asp-for="@Model.UserToUpdate.UserID" />
                            <input type="text" class="form-control" id="exampleFormControlInput1" asp-for="@Model.UserToUpdate.FirstName">
                        </div>
                        <div class="mb-3">
                            <label for="exampleFormControlInput1" class="form-label"><h3>Edit Last Name</h3></label>
                            <input type="text" class="form-control" id="exampleFormControlInput1" asp-for="@Model.UserToUpdate.LastName">
                        </div>
                        <div class="mb-3">
                            <label for="exampleFormControlInput1" class="form-label"><h3>Edit Email</h3></label>
                            <input type="email" class="form-control" id="exampleFormControlInput1" asp-for="@Model.UserToUpdate.Email">
                        </div>
                        <div class="mb-3">
                            <label for="exampleFormControlInput1" class="form-label"><h3>Edit Professional Email</h3></label>
                            <input type="email" class="form-control" id="exampleFormControlInput1" asp-for="@Model.UserToUpdate.ProfessionalEmail">
                        </div>
                        <div class="mb-3">
                            <label for="exampleFormControlInput1" class="form-label"><h3>Edit Position</h3></label>
                            <input type="text" class="form-control" id="exampleFormControlInput1" asp-for="@Model.UserToUpdate.Position">
                        </div>
                        <div class="mb-3">
                            <label for="exampleFormControlInput1" class="form-label"><h3>Edit Phone Number</h3></label>
                            <input type="text" class="form-control" id="exampleFormControlInput1" asp-for="@Model.UserToUpdate.Phone">
                        </div>
                        <div class="mb-3">
                            <label for="exampleFormControlInput1" class="form-label"><h3>Edit College</h3></label>
                            <input type="text" class="form-control" id="exampleFormControlInput1" asp-for="@Model.UserToUpdate.College">
                        </div>
                        <div class="mb-3">
                            <label for="exampleFormControlTextarea1" class="form-label"><h3>Edit Personal Interests</h3></label>
                            <textarea type="text" class="form-control" rows="3" asp-for="@Model.UserToUpdate.PersonalInterests"></textarea>
                        </div>
                        <div class="mb-3">
                            <label for="exampleFormControlTextarea1" class="form-label"><h3>Edit Professional Interests</h3> </label>
                            <textarea class="form-control"  rows="3" asp-for="@Model.UserToUpdate.ProfessionalInterests"></textarea>
                        </div>
                        <div class="mb-3">
                            <label for="exampleFormControlTextarea1" class="form-label"><h3>Edit Bio</h3></label>
                            <textarea class="form-control"  rows="3" asp-for="@Model.UserToUpdate.Bio"></textarea>
                        </div>
                        <div class="mb-3">
                            <label for="exampleFormControlTextarea1" class="form-label"><h3>General Availability</h3></label>
                            <textarea class="form-control"  rows="3" asp-for="@Model.UserToUpdate.GeneralAvailability"></textarea>
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button id="formSubmitButton" type="submit" asp-route-UserID="@Model.UserToUpdate.UserID" class="btn btn-success" asp-page="EditUser">Save Changes</button>

                        <a asp-page="Index/EditUser" class="btn btn-secondary">Cancel</a>
                    </div>
                </div>
            </div>
        </div>
    <!-- Feedback Modal -->
    <div class="modal fade" id="staticBackdrop2" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title fs-5" id="staticBackdropLabel">Got a comment or question? Let us know!</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="exampleFormControlInput1" class="form-label"><h3>First Name</h3></label>
                        <input type="email" class="form-control" id="exampleFormControlInput1">
                    </div>
                    <div class="mb-3">
                        <label for="exampleFormControlInput1" class="form-label"><h3>Last Name</h3></label>
                        <input type="email" class="form-control" id="exampleFormControlInput1">
                    </div>
                    <div class="mb-3">
                        <label for="exampleFormControlInput1" class="form-label"><h3>Email</h3></label>
                        <input type="email" class="form-control" id="exampleFormControlInput1">
                    </div>
                    <div class="mb-3">
                        <label for="exampleFormControlTextarea1" class="form-label"><h5> Feedback/Questions</h5></label>
                        <textarea class="form-control" id="exampleFormControlTextarea1" rows="3"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary">Submit</button>
                </div>
            </div>
        </div>
    </div>

    <!-- feedback button -->
    <a id="feedback" title="feedback" a ref="icon" class="icon" data-bs-toggle="modal" data-bs-target="#staticBackdrop2">
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-chat-left-text-fill" viewBox="0 0 20 20">
            <path d="M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H4.414a1 1 0 0 0-.707.293L.854 15.146A.5.5 0 0 1 0 14.793V2zm3.5 1a.5.5 0 0 0 0 1h9a.5.5 0 0 0 0-1h-9zm0 2.5a.5.5 0 0 0 0 1h9a.5.5 0 0 0 0-1h-9zm0 2.5a.5.5 0 0 0 0 1h5a.5.5 0 0 0 0-1h-5z" />
        </svg>
    </a>

</div>

<!-- Resume Upload Modal -->
<div class="modal fade" id="staticBackdrop3" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title fs-5" id="staticBackdropLabel">Attach Resume</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="mb-3">
          <input class="form-control" type="file" id="formFile">
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary">Submit</button>
      </div>
    </div>
  </div>
</div>

<!-- Logout Modal -->
<div class="modal fade" id="staticBackdrop4" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="staticBackdropLabel">Logout</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        Are you sure you would like to logout?
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary">Yes, I understand</button>
      </div>
    </div>
  </div>
</div>


<!-- Settings Modal -->
<div class="modal fade" id="staticBackdrop5" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="staticBackdropLabel">Settings</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
                    <!-- Default switch -->
            <div class="form-check form-switch">
              <input class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheckDefault" />
              <label class="form-check-label" for="flexSwitchCheckDefault">Allow Notifications</label>
            </div>

              <!-- Default switch -->
              <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheckDefault" />
                <label class="form-check-label" for="flexSwitchCheckDefault">Allow Email Notifications</label>
              </div>

                

      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary">Yes, I understand</button>
      </div>
    </div>
  </div>
</div>


<script>
    /* Scroll to top when arrow up clicked BEGIN */
    $(window).scroll(function () {
        var height = $(window).scrollTop();
        if (height > 100) {
            $('#back2Top').fadeIn();
        } else {
            $('#back2Top').fadeOut();
        }
    });
    $(document).ready(function () {
        $("#back2Top").click(function (event) {
            event.preventDefault();
            $("html, body").animate({ scrollTop: 0 }, "slow");
            return false;
        });

    });
    /* Scroll to top when arrow up clicked END */
</script>



    <script>


        // list of values the user has clicked
        const newlyClickedValues = new Map();


        // TODO: Get the existing tags list
        //document.getElementById().chil

        // TODO: Update checkboxes of already existing tags

        function existingSkills() {
            console.log("running on load");


            //I need to loop through each row in the table and get the Skill ID and the Skill name to add to the map
            //check those boxes, and ensure the pills display

            var existingList = document.getElementsByTagName('td');

            for (i = 0; i < existingList.length; i++) {
                const skillNameExisting = existingList[i].getAttribute("existingSkillName");
                const skillIDExisting = existingList[i].getAttribute("existingID");

                console.log(skillNameExisting + " " + skillIDExisting);

                const tagDiv = document.getElementById("tagArea");

                //target the checkbox in the checkbox area with the matching ID and check it
                const checkAdd = document.getElementById(`input-${skillIDExisting}`);
                console.log(checkAdd);
                checkAdd.checked = true;

                //add the values to the map
                newlyClickedValues.set(parseInt(skillIDExisting, 10), skillNameExisting);


                //
                let tag = document.createElement("span");

                tag.innerHTML = skillNameExisting;

                tag.skillIdValue = skillIDExisting;

                tag.setAttribute('id', skillIDExisting);

                document.getElementById("tagArea").appendChild(tag);

                document.getElementById(`${skillIDExisting}`).innerHTML = (skillNameExisting + `<i onclick="onTagRemove(${skillIDExisting})" class="fa fa-times-circle"> </i>`);

                console.log(newlyClickedValues);

                /////////////////////////////////////////////
                let tag2 = document.createElement("span");

                tag2.innerHTML = skillNameExisting;

                tag2.skillIdValue = skillIDExisting;

                tag2.setAttribute('id', `display-${skillIDExisting}`);

                console.log("this is the tag 2 id" + tag2.id);
                document.getElementById("tagArea2").appendChild(tag2);


                document.getElementById(`display-${skillIDExisting}`).innerHTML = skillNameExisting;
            }

        };


        // Function: when a user has clicked a value, add them to the list
        const onCheckboxClick = (skillId) => {

            var ele = document.getElementById(`input-${skillId}`);

            const skillName = document.getElementById(`input-${skillId}`).getAttribute("skillName");

            //the container where the buttons will go
            const tagDiv = document.getElementById("tagArea");

            if (ele.checked) {
                console.log(`Skill ${skillId} was clicked.`);

                newlyClickedValues.set(skillId, skillName);

                let tag = document.createElement("span");

                tag.innerHTML = skillName;

                tag.skillIdValue = skillId;

                tag.setAttribute('id', skillId);

                document.getElementById("tagArea").appendChild(tag);

                //input button within the new span
                let btn = document.createElement("i");

                btn.skillIdValue = skillId;
                btn.setAttribute("onclick", `onTagRemove(${skillId})`);

                document.getElementById(`${skillId}`).innerHTML = (skillName + `<i onclick="onTagRemove(${skillId})" class="fa fa-times-circle"> </i>`);

                console.log(newlyClickedValues);
            }
            else {
                document.getElementById(`${skillId}`).remove();
                newlyClickedValues.delete(skillId);
                console.log(newlyClickedValues);

            }
        };

        // Functions: When a tag's X is removed, update the state
        const onTagRemove = (skillId) => {
            // TODO: remove skill from clicked values map so the tag disappears

            //set the checkbox to unchecked
            const rem = document.getElementById(`input-${skillId}`);
            rem.checked = false;

            //remove the span and its child button
            document.getElementById(`${skillId}`).remove();

            //update the map
            newlyClickedValues.delete(skillId);

            console.log(newlyClickedValues);
            // TODO: set the checkbox to be un-checked so the form is updated as well
        };


        const myFunction = () => {
            // Declare variables
            var input, filter, table, tr, td, i, txtValue;
            input = document.getElementById("myInput");
            filter = input.value.toUpperCase();
            table = document.getElementById("myTable");
            tr = table.getElementsByTagName("tr");

            console.log(input + filter + table);

            // Loop through all table rows, and hide those who don't match the search query
            for (i = 0; i < tr.length; i++) {
                td = tr[i].getElementsByTagName('label')[0];
                console.log(td);
                if (td) {
                    txtValue = td.textContent || td.innerText;
                    if (txtValue.toUpperCase().indexOf(filter) > -1) {
                        tr[i].style.display = "";
                    } else {
                        tr[i].style.display = "none";
                    }
                }
            }
        };

        document.addEventListener("DOMContentLoaded", existingSkills);

    </script>

    </form>
<br />
<br />
<br />
<br />
<br />
